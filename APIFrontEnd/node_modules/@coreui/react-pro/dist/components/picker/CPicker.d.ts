import React, { ReactNode } from 'react';
import { CDropdownProps } from '../dropdown/CDropdown';
import { Colors } from '../Types';
export interface CPickerProps extends Omit<CDropdownProps, 'variant'> {
    /**
     * Toggle visibility or set the content of cancel button.
     *
     * @default 'Cancel'
     */
    cancelButton?: boolean | ReactNode;
    /**
     * Sets the color context of the cancel button to one of CoreUI’s themed colors.
     *
     * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string
     * @default 'primary'
     */
    cancelButtonColor?: Colors;
    /**
     * Size the cancel button small or large.
     *
     * @default 'sm'
     */
    cancelButtonSize?: 'sm' | 'lg';
    /**
     * Set the cancel button variant to an outlined button or a ghost button.
     *
     * @default 'ghost'
     */
    cancelButtonVariant?: 'outline' | 'ghost';
    /**
     * Toggle visibility or set the content of confirm button.
     *
     * @default 'OK'
     */
    confirmButton?: boolean | ReactNode;
    /**
     * Sets the color context of the confirm button to one of CoreUI’s themed colors.
     *
     * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string
     * @default 'primary'
     */
    confirmButtonColor?: Colors;
    /**
     * Size the confirm button small or large.
     *
     * @default 'sm'
     */
    confirmButtonSize?: 'sm' | 'lg';
    /**
     * Set the confirm button variant to an outlined button or a ghost button.
     */
    confirmButtonVariant?: 'outline' | 'ghost';
    /**
     * Set container type for the component.
     */
    container?: 'dropdown' | 'inline';
    /**
     * Toggle the disabled state for the component.
     */
    disabled?: boolean;
    /**
     * Toggle visibility of footer element or set the content of footer.
     */
    footer?: boolean | ReactNode;
    /**
     * Add custom elements to the footer.
     */
    footerContent?: ReactNode;
    /**
     * Callback fired when the cancel button has been clicked.
     */
    onCancel?: () => void;
    /**
     * Callback fired when the confirm button has been clicked.
     */
    onConfirm?: () => void;
    /**
     * The content of toggler.
     */
    toggler?: ReactNode;
}
export declare const CPicker: React.ForwardRefExoticComponent<CPickerProps & React.RefAttributes<HTMLDivElement | HTMLLIElement>>;
